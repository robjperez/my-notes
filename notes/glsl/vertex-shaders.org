#+TITLE: Vertex Shaders in GLSL
#+AUTHOR: Roberto
#+DATE: 2025-09-03
#+TAGS: glsl, vertex-shaders, graphics, opengl, shaders

* Introduction to Vertex Shaders

Vertex shaders are the first stage in the graphics pipeline. They process individual vertices and are responsible for transforming vertex positions from model space to clip space.

* Key Responsibilities

- Transform vertex positions using model, view, and projection matrices
- Calculate lighting per vertex
- Pass data to fragment shaders via varying variables
- Manipulate vertex attributes like position, normal, and texture coordinates

* Basic Vertex Shader Example

#+BEGIN_SRC glsl
attribute vec3 aVertexPosition;
attribute vec2 aTextureCoord;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;

varying vec2 vTextureCoord;

void main(void) {
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
    vTextureCoord = aTextureCoord;
}
#+END_SRC

* Common Vertex Shader Patterns

** Position Transformation
The most fundamental operation is transforming vertex positions from model space to clip space.

** Lighting Calculations
Vertex shaders can perform per-vertex lighting calculations, though per-pixel lighting in fragment shaders often produces better results.

** Data Passing
Use varying variables to pass interpolated data to fragment shaders.

* Performance Considerations

- Vertex shaders run once per vertex
- Keep calculations simple for better performance
- Use uniforms for data that doesn't change per vertex
- Consider moving complex calculations to fragment shaders when possible

* Resources

- [[https://www.khronos.org/opengl/wiki/Vertex_Shader]]
- [[https://learnopengl.com/Getting-started/Shaders]]
